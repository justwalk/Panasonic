#include "pack.h"

#include <iostream>
#include <string>
#include <sstream>
#include <fstream>
#include <cstdlib>
#include <regex>
#include <Ws2tcpip.h>

#include "error.h"
#include "login.h"
#include "output.h"
#include "bitmap.h"

#include "disk.h"

//const EnumMap<VHD_PACK_TYPE> VHD_PACK_TYPE_MAP;
//const EnumMap<VHD_EXPORTDISK_STATE> VHD_EXPORTDISK_STATE_MAP;

const EnumMap<PACK_TYPE> PACK_TYPE_MAP;
const EnumMap<PACK_MODE> PACK_MODE_MAP;

PackResource::PackResource(){
	prefix = "packs";
	children.push_back(new CreatePackResource());
	children.push_back(new UUIDPackResource());
}

void PackResource::run(const std::map<std::string, std::string>& params) const{
	ULONG id;
	
	std::istringstream(params.find("mid")->second) >> id;

	JSON::Value* data = PackEnumToJSON(id);

	printHeaders();
	data->render();

	delete data;
}

UUIDPackResource::UUIDPackResource(){
	param = "pid";
	children.push_back(new DeletePackResource);
	children.push_back(new UpdatePackResource);
	children.push_back(new DiskResource);
	//xiongpanan add start 2016/4/19
	children.push_back(new SetPackResource);
	//xiongpanan add end 2016/4/19
	//xiong panan  add start 2016/4/22
	children.push_back(new UpdateBootMenuPackResource);
	//xiong panan  add end 2016/4/22
	//xiong panan  add end 2016/4/27
	children.push_back(new StartUpdateResource);
	//xiong panan  add end 2016/4/27
}

void UUIDPackResource::run(const std::map<std::string, std::string>& params) const{
	ULONG id;
	
	std::istringstream(params.find("pid")->second) >> id;
	
	PACK_OBJ info;
	
	ULONG error;
	if(!(GetPackFromPackID(id, &info, &error)))
		return SDKError("GetPackFromPackID", error);
	
	JSON::Value* data = PackToJSON(info);

	printHeaders();
	data->render();

	delete data;
}

#define WOL_UDP_PORT 9
#define WOL_HEADER_LENGTH 6
#define WOL_MAC_LENGTH 6
#define WOL_MAC_REPEAT_COUNT 16
#define WOL_PASSWORD_LENGTH 6
#define WOL_PACKET_LENGTH ( WOL_HEADER_LENGTH + WOL_MAC_LENGTH * WOL_MAC_REPEAT_COUNT )

bool customWakeOnLanComputerPack(char *mac, in_addr ip, in_addr netmask)
{
	// mac c0:3f:d5:65:52:35
	uint8_t i;
	uint8_t wolPacketData[WOL_PACKET_LENGTH];
	uint8_t *p;

	memset(wolPacketData, 0xff, WOL_HEADER_LENGTH);
	p = wolPacketData + WOL_HEADER_LENGTH;

	for (i = 0; i < WOL_MAC_LENGTH; ++i) {
		int hexCode;
		sscanf(mac + 3 * i, "%2x", &hexCode);
		*p = static_cast<uint8_t>(hexCode);
		++p;
	}

	for (i = 1; i < WOL_MAC_REPEAT_COUNT; ++i)
		memcpy(wolPacketData + WOL_HEADER_LENGTH + WOL_MAC_LENGTH * i, wolPacketData + WOL_HEADER_LENGTH, WOL_MAC_LENGTH);

	int sockFd = socket(AF_INET, SOCK_DGRAM, 0);
	if (sockFd < 0) {
		return false;
	}

	int broadcast = 1;
	if (setsockopt(sockFd, SOL_SOCKET, SO_BROADCAST, (char *)&broadcast, sizeof(broadcast)) == -1) {
		closesocket(sockFd);
		return false;
	}

	std::vector<uint32_t> destinationAddresses;
	destinationAddresses.push_back(INADDR_BROADCAST);
	destinationAddresses.push_back(ip.s_addr | (~netmask.s_addr));

	{
		std::string subject;
		{
			std::stringstream subjectBuffer;
			{
				std::ifstream inputStream("bc-subnet.ini");
				if (inputStream.is_open()) {
					subjectBuffer << inputStream.rdbuf();
				}
				else {
					std::ifstream inputStream2("c:\\nkv\\bc-subnet.ini");
					if (inputStream2.is_open())
						subjectBuffer << inputStream2.rdbuf();
				}
			}
			subject = subjectBuffer.str();
		}

		std::smatch matches;
		//std::regex subjectRegex(R"(((25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)))");
		//std::regex subjectRegex("(((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)))");
		std::regex subjectRegex("(((25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)))");

		while (std::regex_search(subject, matches, subjectRegex)) {
			struct in_addr buf;
			inet_pton(AF_INET, matches.begin()->str().c_str(), &buf);
			if (std::find(destinationAddresses.cbegin(), destinationAddresses.cend(), buf.s_addr) == destinationAddresses.cend())
				destinationAddresses.push_back(buf.s_addr);
			subject = matches.suffix().str();
		}
	}

	bool sent = false;

	for (int i = 0; i < destinationAddresses.size(); ++i) {
		sockaddr_in destination;
		destination.sin_family = AF_INET;
		destination.sin_addr.s_addr = destinationAddresses[i];
		destination.sin_port = htons(WOL_UDP_PORT);

		if (sendto(sockFd, reinterpret_cast<char const *>(wolPacketData), WOL_PACKET_LENGTH, 0, reinterpret_cast<sockaddr const *>(&destination), sizeof(destination)) != -1) {
			sent = true;
		}
	}

	closesocket(sockFd);
	return sent;
}







DeletePackResource::DeletePackResource(){
	prefix = "delete";
}

void DeletePackResource::run(const std::map<std::string, std::string>& params) const{
	ULONG id;
	
	std::istringstream(params.find("pid")->second) >> id;
	
	deletePack(id);
		
	printDone();
}

UpdatePackResource::UpdatePackResource(){
	prefix = "update";
}

void UpdatePackResource::run(const std::map<std::string, std::string>& params) const{
	ULONG pid;
	std::istringstream(params.find("pid")->second) >> pid;
	
	if(params.find("ActiveDisk") != params.end()) {
		ULONG did;
	
		std::istringstream(params.find("ActiveDisk")->second) >> did;
		
		ULONG error;
		if(!(SetPackActiveDisk(did, pid, &error)))
			return SDKError("SetPackActiveDisk", error);
	}
	
	if (params.find("Mode") != params.end()) {
		if(!PACK_MODE_MAP.exists(params.find("Mode")->second))
			invalidParameter("Mode");
		ULONG mode = PACK_MODE_MAP.toBit(params.find("Mode")->second);
		
		CHECK_PARAM("ExitUpdateMode");
		bool exitupdatemode = params.find("ExitUpdateMode")->second == "true";
		
		if(exitupdatemode) {
			CHECK_PARAM("Description");
			
			if(mode == PACK_MODE_UPDATE_ALIVE || mode == PACK_MODE_UPDATE_2|| mode == PACK_MODE_RW)
				invalidParameter("Mode");
			
			ULONG error;
			if(!(SetPackExitUpdateMode(pid, params.find("Description")->second.c_str(), mode, &error)))
				return SDKError("SetPackExitUpdateMode", error);
		} else {
			ULONG error;
			if(!(SetPackMode(mode, pid, &error)))
				return SDKError("SetPackMode", error);
		}
	}
	
	printDone();
}
//xiongpanan add start 2016/4/19
SetPackResource::SetPackResource(){
	prefix = "setPack";
}

void SetPackResource::run(const std::map<std::string, std::string>& params) const{
	ULONG id;
	ULONG type;
	std::istringstream(params.find("pid")->second) >> id;
	std::istringstream(params.find("PackType")->second) >> type;
	ULONG error;
	if(!SetPackCacheFlag(type,id,&error)){
		return SDKError("SetPackCacheFlag", error);
	}
	
		
	printDone();
}

//xiongpanan add end 2016/4/19

//xiong panan  add start 2016/4/22
UpdateBootMenuPackResource::UpdateBootMenuPackResource(){
	prefix = "updateBootMenuPack";
}

void UpdateBootMenuPackResource::run(const std::map<std::string, std::string>& params) const{
	ULONG pid;
	std::istringstream(params.find("pid")->second) >> pid;
	
	if (params.find("Mode") != params.end()) {
		if(!PACK_MODE_MAP.exists(params.find("Mode")->second))
			invalidParameter("Mode");
		ULONG mode = PACK_MODE_MAP.toBit(params.find("Mode")->second);
		
		CHECK_PARAM("ExitUpdateMode");
		bool exitupdatemode = params.find("ExitUpdateMode")->second == "true";
		
		if(exitupdatemode) {
			CHECK_PARAM("Description");
			
			if(mode == PACK_MODE_UPDATE_ALIVE)
				invalidParameter("Mode");
			
			ULONG error;
			if(!(SetPackExitUpdateMode(pid, params.find("Description")->second.c_str(), mode, &error)))
				return SDKError("SetPackExitUpdateMode", error);
		} else {
			ULONG error;
			if(!(SetPackMode(mode, pid, &error)))
				return SDKError("SetPackMode", error);
		}
	}
	
	printDone();
}

//xiong panan  add end 2016/4/22

//xiong panan  add start 2016/4/28
StartUpdateResource::StartUpdateResource(){
	prefix = "startUpdate";
}

void StartUpdateResource::run(const std::map<std::string, std::string>& params) const{
	ULONG pid;
	ULONG computerId;
	ULONG timeOut;
	ULONG menu_id;
	ULONG error;
	std::istringstream(params.find("pid")->second) >> pid;
	std::istringstream(params.find("computerId")->second) >> computerId;
	std::istringstream(params.find("timeOut")->second) >> timeOut;
	std::istringstream(params.find("menu_id")->second) >> menu_id;
	if(IsPcAlive(computerId,timeOut)){
		//printDone();
		if(ShutdownComputer(computerId)){
			SetDfltMenuForComputer(menu_id);
				if (params.find("Mode") != params.end()) {
					//printDone();
					if(!PACK_MODE_MAP.exists(params.find("Mode")->second))
						invalidParameter("Mode");
						ULONG mode = PACK_MODE_MAP.toBit(params.find("Mode")->second);
						if(SetPackMode(mode, pid, &error)){
							OBJ_COMP info;
							if(!(GetSpecifiedComputer(computerId, &info, &error)))
								return SDKError("GetSpecifiedComputer", error);
							if(customWakeOnLanComputerPack(info.pchMac, info.nIP4, info.nNetMask4)){
								IsPcAlive(computerId,timeOut);
								
								
							}else{
								return SDKError("WakeOnLanComputer", EBLIB_UNKNOWN);
							}

							
						}else{
							return SDKError("SetPackMode", error);
						}
					
				}


		}else{
			return SDKError("ShutdownComputer", error);
		}

	}
		
	
}

//xiong panan  add end 2016/4/28








CreatePackResource::CreatePackResource(){
	prefix = "create";
}

void CreatePackResource::run(const std::map<std::string, std::string>& params) const{
	CHECK_PARAM("PackType");
	
	ULONG mid;
	std::istringstream(params.find("mid")->second) >> mid;
	
	if(!PACK_TYPE_MAP.exists(params.find("PackType")->second))
			invalidParameter("PackType");
	ULONG type= PACK_TYPE_MAP.toBit(params.find("PackType")->second);
	
	ULONG nid;
	
	ULONG error;
	if(!(AddPack(mid, type, &nid, &error)))
		return SDKError("AddPack", error);
	
	printID(nid);
}

void deletePack(ULONG pid){
	/* Maybe need to delete recursively */

	ULONG error;
	if(!(DelPack(pid, &error)))
		return SDKError("DelPack", error);
}

JSON::Value* PackToJSON(const PACK_OBJ& info){
	JSON::Object* data = new JSON::Object();

	data->add(new JSON::String("ID"), new JSON::Integer(info.nID));
	data->add(new JSON::String("ActiveDisk"), new JSON::Integer(info.nActvDsk));
	data->add(new JSON::String("Menu"), new JSON::Integer(info.nMID));
	data->add(new JSON::String("PackType"), new JSON::String(PACK_TYPE_MAP.toString(info.nType)));
	data->add(new JSON::String("PackMode"), new JSON::String(PACK_MODE_MAP.toString(info.nMode)));
	/* TODO add flags */
	data->add(new JSON::String("Name"), new JSON::Integer(info.nID));

	return data;
}



JSON::Array* PackEnumToJSON(ULONG mid){
	ENUM_HANDLE EnumObj = GetFirstPackFromSpecMenu(mid);
		
	return enumToJSON<PACK_OBJ, PackToJSON, GetNextPackFromSpecMenu>(EnumObj);
}