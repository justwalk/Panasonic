define([
  'require',
  'jquery',
  'underscore',
  'backbone',
  'rsvp',
  'views/computers/computer_form',
  'models/computer',
  'views/commands/update_mode',
  'views/commands/save_update_mode',
  'views/commands/test_update_mode',
  'views/commands/boot_menu',
  'views/commands/multiclient_boot_menu',
  'views/commands/boot_menu_template',
  'views/commands/setting_group_menu',
  'views/commands/setting_computer_menu',
], function(require, $, _, Backbone,RSVP, ComputerForm, Computer,SettingMenuView,SettingGroupMenuView,SettingComputerMenuView){
  var ComputerCommands = Backbone.View.extend({
    events:{
      'click .add-computer': 'addComputer',
      'click .edit-computer': 'editComputer',
      'click .update-mode' : 'updateMode',
      'click .save-update-mode' : 'saveUpdateMode',
      'click .delete-computer' : 'deleteComputer',
      'click .boot-menu': 'bootMenu', 
      'click .lock-position': 'lockComputers',
      'click .unlock-position': 'unlockComputers',
      'click .addMenu': 'addMenu'
       
    },
    initialize: function(options) {
      this.computersView = this.options.computersView;
      this.clickedComputer = this.options.clickedComputer;
      //this.bind('recheck', this.toggleCommandAvailability, this);
      this.clickedComputer.bind('reset', this.toggleCommandAvailability, this);
      this.collection.bind('toggleSelected', this.toggleCommandAvailability, this);
		  this.groups = this.options.groups;
    },
    
    addComputer: function(e) {
//      --------------------------------------------------------------  
/*       if (!this.computerForm) {
         this.computerForm = new ComputerForm({groups: this.groups});
       }
       this.computerForm.model = new Computer();
       if (this.groups.group_id){
         this.computerForm.model.set('group_id', this.groups.group_id);
       }

       this.computerForm.render().$el.appendTo($('#modal-container')).modal();
      
       $('input:visible:first', this.computerForm.el).focus();*/
//     --------------------------------------------------------------  
	  var self=this;
      _.bindAll(this, 'render');
      socket.emit('computer:readRewrite', {computer_id:1}, function(err, data) {
		var data1 = {};
		for(var a in data){
			if(a!="id" && a!="name")
				data1[a] = data[a];		
		}
		console.log(self);
        
    	var computer =new Computer(data1);
        self.computerForm = new ComputerForm({groups: self.groups, model:computer});
        self.computerForm.render().$el.appendTo($('#modal-container')).modal();
       $('input:visible:first', self.computerForm.el).focus();
      });
    },

    getGroup:function(){
    var self = this;
    
      var data = this.options.groups.collection._byCid;
      var group = '';
      for(var a in data){
      if(data[a].get('id') == self.options.collection.group_id){
        group = data[a];
      }
      }
      return this.group = group;
  },
    
//增加菜单
        addMenu: function() {
          var self=this;
          if(this.options.collection.group_id > 0 && this.options.collection.length == this.collection.selectedComputers().length){
                  socket.emit('menus:read', {computer_id:1}, function(err, data) {
                  self.default_menu=data;
                  var settingGroupMenuView = new (require('views/commands/setting_group_menu'))({groups: self.getGroup(),defaultMenu:self.default_menu});
                  settingGroupMenuView.render().$el.appendTo($('#modal-container')).modal();
                  $('#task_name', settingGroupMenuView.el).focus();
                  });
          }else if(this.options.collection.group_id == 0 || this.collection.selectedComputers().length){
                 socket.emit('menus:read', {computer_id:1}, function(err, data) {
                 self.default_menu=data;
                 var settingComputerMenuView = new (require('views/commands/setting_computer_menu'))({computers: self.getActiveComputers(),defaultMenu:self.default_menu});
                  settingComputerMenuView.render().$el.appendTo($('#modal-container')).modal();
                  $('#task_name', settingComputerMenuView.el).focus();
                     });  
                  }
         

           // var self=this;
           //  _.bindAll(this, 'render');
           //   console.log(self);
           //    self.setting_menu = new (require('views/commands/setting_menu'))({groups: self.groups});
           //  self.setting_menu.render().$el.appendTo($('#modal-container')).modal();
           // $('input:visible:first', self.setting_menu.el).focus();
    },


    updateMode: function() {
      var updateModeView = new (require('views/commands/update_mode'))({computersView: this.computersView,groupView: this.groups,computers: this.getActiveComputers()});
      updateModeView.render().$el.appendTo($('#modal-container')).modal();
    },

    saveUpdateMode: function() {
      var saveUpdateModeView = new (require('views/commands/save_update_mode'))({computersView: this.computersView ,groupView: this.groups, computers: this.getActiveComputers()});
      saveUpdateModeView.render().$el.appendTo($('#modal-container')).modal();
    },
    
    editComputer: function() {
      if (this.getActiveComputers()) {
        if (this.getActiveComputers().length==1) {
          this.computerForm = new ComputerForm({groups: this.groups, model: this.getActiveComputers()[0]});
        }else{
          this.computerForm = new ComputerForm({groups: this.groups, model: this.getActiveComputers()});
        }
        this.computerForm.render().$el.appendTo($('#modal-container')).modal();

        $('input:visible:first', this.computerForm.el).focus();
      }
    },

    deleteComputer: function() {
      var ja = underi18n.MessageFactory(locale);
      var r=confirm(ja('Are you sure you want to delete it?'));
      if (r===true) {
        var computers = this.getActiveComputers();
        _(computers).each(function(computer) {
          computer.destroy({error: function(model, response) {
            alert('An error occured when deleting Computer '+model.get('name')+'. Error:'+response);
          }});
        });
      }
    },
     bootMenu: function() {
      var bootMenuView;
      var promiseArray = [];

      if(App.user == 'admin') {
       // alert("this.getActiveComputers()==="+JSON.stringify(this.getActiveComputers()));
        if (this.getActiveComputers().length > 1) {
          bootMenuView = new (require('views/commands/multiclient_boot_menu'))({computers: this.getActiveComputers()});
          bootMenuView.render().$el.appendTo($('#modal-container')).modal();
          var loadingScreen = new LoadingView({promiseArray: promiseArray,displayView: bootMenuView});
          loadingScreen.render();
        }
        else {
          bootMenuView = new (require('views/commands/boot_menu'))({computers: this.getActiveComputers()});
          bootMenuView.render().$el.appendTo($('#modal-container')).modal();
        }
        $('#menu-name', bootMenuView.el).focus();
      }
    },

     lockComputers: function() {
      var self = this;
      _(this.getActiveComputers()).forEach(function (computer) {
        if (computer.get('locked') == false) {
          computer.set('locked', true);
          computer.trigger('rerender');
          computer.save({},{
            success: function(model,response) {
              $('.lock-position', self.el).hide();
                $('.unlock-position', self.el).show();
            }
          });
        }
      });
    },

    unlockComputers: function() {
      var self = this;
      _(this.getActiveComputers()).forEach(function (computer){
        if (computer.get('locked') == true) {
          computer.set('locked', false);
          computer.save({},{
            success: function(model,response) {
               $('.lock-position', self.el).show();
                $('.unlock-position', self.el).hide();
              computer.trigger('rerender');
            }
          });
        }
      });
    },
     selectRefresh:function(e){
     
        Backbone.history.loadUrl();
      } , 
    getActiveComputers: function() {
      if (this.collection.selectedComputers().length) {
        return this.collection.selectedComputers();
      }else if(this.clickedComputer.length) {
        return this.clickedComputer.models;
      }else{
        return false;
      }
    },
    
    toggleCommandAvailability: function() {
      if (this.getActiveComputers()){
        $('button', this.el).removeAttr('disabled');
      } else{
        $(':not(.add-computer) button', this.el).attr('disabled', 'disabled');
      }
    }

  });

  return ComputerCommands;
});
