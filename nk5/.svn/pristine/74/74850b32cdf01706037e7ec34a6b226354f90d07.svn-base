define([
  'jquery',
  'underscore',
  'backbone',
  'modelBinder',
  'text!templates/schedules/editcontent-ioserver.html',
  'text!templates/schedules/editcontent-scriptexe.html',
  'text!templates/schedules/editcontent-diskcopy.html',
  'models/task',
  'models/server',

  ], function($, _, Backbone, ModelBinder,ioserverTemlate,scriptexeTemlate,diskcopyTemlate,Task,Server,BaseServer){
 BaseServer = Backbone.View.extend({
    events:{
      'submit .task-form ': 'saveModel',
      'hidden' : 'remove' //the "hidden" event is from bootstrap modal dismiss
    },
    initialize: function(options) {
      var self = this;
   
      _.bindAll(this, 'render', 'weekdaysConverter', 'cycleChangedConverter', 'executeChangedConverter');
      this.model = this.options.task || new Task();
      console.log(this.model.toJSON());
      if(this.model.get('action')=='ioserver_restart'){
          this.template=_.template(underi18n.template(ioserverTemlate, msgFactory));
           this.bindings = {
            computer_name: '[name=computer_name]',
            memo: '[name=memo]',
            execute:[
              {selector: '[name=execute]'},
              {selector: '#schedule-details', elAttribute:'displayed',  converter: this.executeChangedConverter}
            ],
            cycle: [{selector: '[name=cycle]'}, {selector: '.cycle', converter: this.cycleChangedConverter}],
            date: '[name=date]',
            weekdays: {selector:'[name=weekdays]', converter: this.weekdaysConverter, elAttribute:'checked'},
            month_days: {selector:'[name=month_days]', converter: this.monthDaysConverter},
            time: '[name=time]'
          };
      
      }else if(this.model.get('action')=="script_exe"){
          this.template=_.template(underi18n.template(scriptexeTemlate, msgFactory));
           this.bindings = {
            memo: '[name=memo]',
            execute:[
              {selector: '[name=execute]'},
              {selector: '#schedule-details', elAttribute:'displayed',  converter: this.executeChangedConverter}
            ],
            cycle: [{selector: '[name=cycle]'}, {selector: '.cycle', converter: this.cycleChangedConverter}],
            date: '[name=date]',
            weekdays: {selector:'[name=weekdays]', converter: this.weekdaysConverter, elAttribute:'checked'},
            month_days: {selector:'[name=month_days]', converter: this.monthDaysConverter},
            time: '[name=time]',
            command: '[name=command]'
          };
      }else if(this.model.get('action')=='disk_copy'){
           this.template=_.template(underi18n.template(diskcopyTemlate, msgFactory));
           this.bindings = {
            computer_name: '[name=computer_name]',
            memo: '[name=memo]',
            execute:[
              {selector: '[name=execute]'},
              {selector: '#schedule-details', elAttribute:'displayed',  converter: this.executeChangedConverter}
            ],
            cycle: [{selector: '[name=cycle]'}, {selector: '.cycle', converter: this.cycleChangedConverter}],
            date: '[name=date]',
            weekdays: {selector:'[name=weekdays]', converter: this.weekdaysConverter, elAttribute:'checked'},
            month_days: {selector:'[name=month_days]', converter: this.monthDaysConverter},
            time: '[name=time]'
          };
      }
      var time=this.model.get('time').split(':');
      this.model.set('time',time[0]+':'+time[1]);
      this._modelBinder = new ModelBinder();
     
            
      this.model.bind('error', function(object, message) {
        var errorContainer = $('.task-form .errors', this.el);
        errorContainer.html(JSON.stringify(message));
        errorContainer.show();
      });
    },
    
    monthDaysConverter: function(direction, value, attribute, model) {
      return direction=='ViewToModel' ? value.join(',') : value.split(',');
    },

    cycleChangedConverter: function(direction, value, attribute, model) {
      $('#once, #weekly, #monthly', this.el).addClass('hide');
      $('#'+model.get('cycle'), this.el).removeClass('hide');
    },

    weekdaysConverter: function(direction, value, attribute) {
      var self = this;
      if (direction=='ViewToModel') {
        var weekdays = [];
        $('[name=weekdays]:checked', self.el).each(function() { weekdays.push(this.value); });
        return weekdays.join(',');
      }else{
        _.forEach(value.split(','), function(day) {
          $('#weekdays_'+day, self.el).attr('checked', true);
        });
      }
      
    },

    executeChangedConverter: function(direction, value, attribute, model){
      if (value=='now') {
        this.model.set('cycle', 'once');
      }
      return value!='now';
    },
    
    saveModel: function(e) {
      e.preventDefault();
      var self = this;
      this.model.set('time', $('#time').val()+":00");
      if (this.model.isValid) {
            self.model.save({}, {
              success: function(model, resp) {
                self.$el.modal('hide');
                App.vent.trigger("tasks:render");
              }
            });
      }
      return false;
    },

    render: function() {
      var self = this;
     $(this.el).html(this.template({model:this.model}));
      this._modelBinder.bind(this.model, this.el, this.bindings);
      $('.datepicker', this.el).datepicker({dateFormat: 'dd/mm/yy'});
      return this;
    }
  });
  return BaseServer;
});