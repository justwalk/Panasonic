#ifndef BASEDISK_H
#define BASEDISK_H

#include "route.h"
#include "commonJSON.h"

class BaseDiskResource : public Route::SubResource{
public:
	BaseDiskResource();
	void virtual run(const std::map<std::string, std::string>& params) const;
};

class DeleteBaseDiskResource : public Route::SubResource{
public:
	DeleteBaseDiskResource();
	void virtual run(const std::map<std::string, std::string>& params) const;
};

class UUIDBaseDiskResource : public Route::ParameterResource{
public:
	UUIDBaseDiskResource();
	void virtual run(const std::map<std::string, std::string>& params) const;
};

class CreateBaseDiskResource : public Route::SubResource{
public:
	CreateBaseDiskResource();
	void virtual run(const std::map<std::string, std::string>& params) const;
};

class UpdateBaseDiskResource : public Route::SubResource{
public:
	UpdateBaseDiskResource();
	void virtual run(const std::map<std::string, std::string>& params) const;
};

class RevertBaseDiskResource : public Route::SubResource{
public:
	RevertBaseDiskResource();
	void virtual run(const std::map<std::string, std::string>& params) const;
};

class DropBaseDiskResource : public Route::SubResource{
public:
	DropBaseDiskResource();
	void virtual run(const std::map<std::string, std::string>& params) const;
};

class MergeBaseDiskResource : public Route::SubResource{
public:
	MergeBaseDiskResource();
	void virtual run(const std::map<std::string, std::string>& params) const;
};


class DiskRestore : public Route::SubResource{
public:
	DiskRestore();
	void virtual run(const std::map<std::string, std::string>& params) const;
};

JSON::Value* DiskToJSON(const DISK_INFO_OBJ& info);

JSON::Array* BaseDiskEnumToJSON(ULONG iid);
JSON::Array* SnapshotEnumToJSON(ULONG bdid);
JSON::Array* BaseDiskEnumToJSON(ULONG iid, ULONG pid);
JSON::Array* BaseDiskRestoreToJSON(ULONG iid);

#endif
