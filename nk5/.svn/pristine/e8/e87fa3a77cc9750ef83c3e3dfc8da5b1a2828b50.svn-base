#include "basedisk.h"

#include <iostream>
#include <sstream>
#include <string>

#include "login.h"
#include "output.h"

#include "bitmap.h"

const EnumMap<DISK_TYPE> DISK_TYPE_MAP;

BaseDiskResource::BaseDiskResource(){
	prefix = "disks";
    children.push_back(new CopyBaseDiskResource());
	children.push_back(new BackupBaseDiskResource());
	children.push_back(new CreateBaseDiskResource());
	children.push_back(new UUIDBaseDiskResource());
}

void BaseDiskResource::run(const std::map<std::string, std::string>& params) const{
	JSON::Value* data = BaseDiskEnumToJSON(GetInt(iid));

	if(data == NULL) return;
	
	printHeaders();
	data->render();

	delete data;
}

UUIDBaseDiskResource::UUIDBaseDiskResource(){
	param = "bdid";
	validator = &numberRegex;
	children.push_back(new UpdateBaseDiskResource());
	children.push_back(new DeleteBaseDiskResource());
	children.push_back(new MergeBaseDiskResource());
	children.push_back(new DropBaseDiskResource());
	children.push_back(new RevertBaseDiskResource());
	children.push_back(new DiskRestore());
	children.push_back(new DiskMerge());
	children.push_back(new ProxyToBaseDisk());
	children.push_back(new BaseDiskList());
	children.push_back(new ProxyDiskSync());
	children.push_back(new DiskReSync());
	children.push_back(new DiskReCheck());
}

void UUIDBaseDiskResource::run(const std::map<std::string, std::string>& params) const{
	die("Not supported");
}

DeleteBaseDiskResource::DeleteBaseDiskResource(){
	prefix = "delete";
}

void deleteDisk(ULONG ioid, ULONG id,bool checkval) {
	DISK_INFO_OBJ info;
	
	ENUM_HANDLE EnumObj = GetFirstBaseDisk(ioid, id);
	
	while((GetNextBaseDisk(EnumObj, &info))){
		deleteDisk(ioid, info.nID,checkval);
	}

	FreeEnumObject(EnumObj);
	//xiong panan  change start 2016/4/22
	ULONG errorno = DeleteDiskEx(id, checkval);
	if(errorno != EBLIB_SUCCESS) {
		char error[1000];
		
		sprintf(error, "DelBaseDisk(%u)", id);
		return SDKError(error, errorno);
	}
	//xiong panan  change end 2016/4/22
}

void DeleteBaseDiskResource::run(const std::map<std::string, std::string>& params) const{
	//xiong panan  change start 2016/4/22
  	ULONG checkval;
std::istringstream(params.find("Checkval")->second) >> checkval;
if(checkval==1){
	deleteDisk(GetInt(iid), GetInt(bdid),true);
}else if(checkval==0){
	deleteDisk(GetInt(iid), GetInt(bdid),false);
}
//xiong panan  change end 2016/4/22

	
	
	printDone(); 
}

UpdateBaseDiskResource::UpdateBaseDiskResource(){
	prefix = "update";
}

void UpdateBaseDiskResource::run(const std::map<std::string, std::string>& params) const{
	
	//xiongpanan change start 2016/03/30
	CHECK_PARAM("Name");
		
	ULONG error;
	if(!(EditBaseDisk(GetInt(bdid), params.find("Name")->second.c_str(), &error)))
		return SDKError("EditBaseDisk", error);
	//xiongpanan change end 2016/03/30
	
	
	printDone();
}
// gao start
CopyBaseDiskResource::CopyBaseDiskResource(){
    prefix = "copy";
}

void CopyBaseDiskResource::run(const std::map<std::string, std::string>& params) const{
	char sourceDiskURL[1000]="\\\\";
	char targetDiskURL[1000]="\\\\";
    //  ##############  source  disk
    DISK_INFO_OBJ baseDisk;
	ULONG nowCopyValue;
	std::istringstream(params.find("typeCopyValue")->second) >> nowCopyValue;
    ULONG sourceCopyValue;
    std::istringstream(params.find("sourceValue")->second) >> sourceCopyValue;
    ULONG error;
    if(!GetSpecifiedDisk(sourceCopyValue, &baseDisk, &error))
        return SDKError("GetSpecifiedDisk", error);
    // get source is IP
    strcpy(baseDisk.pchName, clamp(params.find("sourceIP")->second, sizeof(baseDisk.pchName)).c_str());
    //  ###############  target disk
    DISK_INFO_OBJ targetDisk;
    ULONG targetCopyValue;
    std::istringstream(params.find("targetValue")->second) >> targetCopyValue;
    if(!GetSpecifiedDisk(targetCopyValue, &targetDisk, &error))
        return SDKError("GetSpecifiedDisk", error);
	//  #############   copy disk type
	char sourceTD[400];
	char targetTD[400];
    if(nowCopyValue==1){
		// choose copy     get target IP
		strcpy(targetDisk.pchName, clamp(params.find("targetIP")->second, sizeof(targetDisk.pchName)).c_str());
		// copy file old
		strcat(sourceDiskURL,baseDisk.pchName);
		strncpy(sourceTD,baseDisk.pchPath+2,sizeof(baseDisk.pchPath)-2);
		strcat(sourceDiskURL,sourceTD);

		strcat(targetDiskURL,targetDisk.pchName);
		strncpy(targetTD,targetDisk.pchPath+2,sizeof(targetDisk.pchPath)-2);
		strcat(targetDiskURL,targetTD);

	} else{
		// input copy  get import fileName
		strcpy(targetDisk.pchName, clamp(params.find("computerName")->second, sizeof(targetDisk.pchName)).c_str());
		// copy file new
		strcat(sourceDiskURL,baseDisk.pchName);
		strncpy(sourceTD,baseDisk.pchPath+2,sizeof(baseDisk.pchPath)-2);
		strcat(sourceDiskURL,sourceTD);

		strcat(targetDiskURL,baseDisk.pchName);
		strncpy(targetTD,baseDisk.pchPath+2,sizeof(baseDisk.pchPath)-2);
		char* token = strtok(targetTD, "\\");
		while(token !=  NULL){
			if(strstr(token,".vhd")){
				strcat(targetDiskURL,"\\");
				strcat(targetDiskURL,targetDisk.pchName);
				strcat(targetDiskURL,".vhd");
			}else{
				strcat(targetDiskURL,"\\");
				strcat(targetDiskURL,token);
			}
			token = strtok( NULL,"\\");
		}
	}
	CopyFile(sourceDiskURL,targetDiskURL,false);
	printDone();
}
// gao end
// gao start
BackupBaseDiskResource::BackupBaseDiskResource(){
	prefix = "backup";
}

void BackupBaseDiskResource::run(const std::map<std::string, std::string>& params) const{
	char sourceDiskURL[1000]="\\\\";
	char targetDiskURL[1000]="";
	// get time
	time_t t;
	time(&t);
	//  ##############  source  disk
	DISK_INFO_OBJ baseDisk;
	ULONG diskId;
	std::istringstream(params.find("diskId")->second) >> diskId;
	ULONG backNumber;
	std::istringstream(params.find("backNumber")->second) >> backNumber;
	ULONG error;
	if(!GetSpecifiedDisk(diskId, &baseDisk, &error))
		return SDKError("GetSpecifiedDisk", error);
	// get serverIP is IP
	strcpy(baseDisk.pchName, clamp(params.find("serverIP")->second, sizeof(baseDisk.pchName)).c_str());

	char sourceDiskPath[400];
	char targetDiskID[400];
	char sourceFileName[400];
	char targetFileName[400];
	// source file url
	strcat(sourceDiskURL,baseDisk.pchName);
	strncpy(sourceDiskPath,baseDisk.pchPath+2,sizeof(baseDisk.pchPath)-2);
	strcat(sourceDiskURL,sourceDiskPath);
	char* token = strtok(sourceDiskPath, "\\");
	while(token !=  NULL){
		if(strstr(token,".")){
			strcpy(sourceFileName, clamp(token, sizeof(sourceFileName)).c_str());
		}
		token = strtok( NULL,"\\");
	}
    // target file url
	CHECK_PARAM("derectory");
	std::string str = params.find("derectory")->second.c_str();
	std::string nStr = str.substr(str.length()-1,1);
	if(nStr != "\\")
	{
		str = str + "\\";
	}
	strcpy(targetDiskURL, str.c_str());
	itoa(diskId,targetDiskID,10);
	strcat(targetDiskURL,targetDiskID);
	// judge directory
	BOOL judge=CreateDirectory(targetDiskURL,NULL);
	itoa(t,targetFileName,10);
	strcat(targetFileName,"#");
	strcat(targetFileName,sourceFileName);
	strcat(targetDiskURL,"\\");
	if(!judge){
		// alter directory
		char targetDiskCompareURL[1000]="";
		WIN32_FIND_DATA FindFileData;
		BOOL judgeFile=true;
		int countFile=0;
		ULONG fileSizeCompare=0;
		char targetCompareFileName[400];
		char beforeFileName[400];
		strcat(targetDiskCompareURL,targetDiskURL);
		strcat(targetDiskCompareURL,"*.vhd");
		HANDLE hFind=FindFirstFile(targetDiskCompareURL,&FindFileData);
		if(hFind!=INVALID_HANDLE_VALUE){
			while(judgeFile){
				strcpy(beforeFileName, clamp(FindFileData.cFileName, sizeof(beforeFileName)).c_str());
				char* FileNameArray = strtok(FindFileData.cFileName,"#");
				while(FileNameArray != NULL){
					if(!strstr(FileNameArray,".")){
						if(fileSizeCompare==0 || atoi(FileNameArray)<fileSizeCompare){
							fileSizeCompare=atoi(FileNameArray);
							strcpy(targetCompareFileName, clamp(beforeFileName, sizeof(targetCompareFileName)).c_str());
						}
					}
					FileNameArray = strtok( NULL,"#");
				}
				countFile++;
				judgeFile=FindNextFile(hFind,&FindFileData);
			}
		}
		FindClose(hFind);
		if(countFile>=backNumber){
			strcpy(targetFileName, clamp(targetCompareFileName, sizeof(targetFileName)).c_str());
		}
	}
	strcat(targetDiskURL,targetFileName);
	CopyFile(sourceDiskURL,targetDiskURL,false);
	printDone();
}
// gao end
CreateBaseDiskResource::CreateBaseDiskResource(){
	prefix = "create";
}

void CreateBaseDiskResource::run(const std::map<std::string, std::string>& params) const{
	ADD_BASE_DISK_OBJ info;
	memset(&info, 0, sizeof(info));
	
	info.nSrvID = GetInt(iid);

	CHECK_PARAM("Type");
	if(!DISK_TYPE_MAP.exists(params.find("Type")->second))
			invalidParameter("Type");
	
	ULONG type = DISK_TYPE_MAP.toBit(params.find("Type")->second);
	info.nType = type;
	
	CopyInteger(nFmt, "Format");
	CopyString(pchPath, "Path");
	
	ULONG error;
	if(type == DISK_TYPE_EXISTING) {
		SHOW_VHD_INFO existing;
		memset(&existing, 0, sizeof(existing));
		
		if(!(GetExistVhdInfo(info.nSrvID, info.pchPath, &existing, &error)))
			return SDKError("GetExistVhdInfo", error);
		
		info.nType = DISK_TYPE_BASE;
		info.nPID = 0;
		info.nSizeMb = existing.nSizeMb;
		info.nVer = existing.nVer;
		CopyString(pchName, "Name");
	} else if (type == DISK_TYPE_CACHE){
		
		info.nSyncSchd = 0;
		info.nType = DISK_TYPE_CACHE;
		info.nXID=0;
		info.nFmt=0;
		CopyString(pchName, "Path");
		CopyInteger(nPID, "Parent");
		CopyInteger(nSizeMb, "Size");
		CopyString(pchName, "Name");
		//xiongpanan add start 20160325
	}else
	{
		CopyInteger(nSizeMb, "Size");
		CopyString(pchName, "Name");
		CopyInteger(nVer, "Version");
		if (type == DISK_TYPE_PROXY){
			CopyInteger(nXID, "Parent");
		}else{
			CopyInteger(nPID, "Parent");
		}
		
	}
	
	DISK_SYNC sync;
	
	if(info.nType == DISK_TYPE_PROXY) {
		CopyInteger(nXID, "Parent");

		//CopyInteger(nSyncSchd, "SynchronizationSettings");
		info.nSyncSchd = 0;
		
		{
			DISK_SYNC& info = sync;
				
			//CopyInteger(nSyncType, "Type");
			info.nSyncType = 0;
			CopyInteger(nCurSel, "SyncDay");
			CopyInteger(nClock, "SyncHour");
			CopyInteger(nSpeed, "SyncSpeed");
		}
	}

	ULONG nid;
	
	if(!(AddBaseDisk(&info, &nid, TRUE, &error)))
		return SDKError("AddBaseDisk", error);
	
	if(info.nType == DISK_TYPE_PROXY) {
		if(!(SetProxyDiskSync(nid, &sync, &error)))
			return SDKError("SetProxyDiskSync", error);
	}
	
	printID(nid);
}

RevertBaseDiskResource::RevertBaseDiskResource(){
	prefix = "revert";
}

void RevertBaseDiskResource::run(const std::map<std::string, std::string>& params) const{
	ULONG disk = GetInt(bdid);
	ULONG version = GetInt(Snapshot);

	ULONG error;
	if(!(RestoreToSpecifiedRestorePoint(disk, version,version, &error)))
		return SDKError("RestoreToSpecifiedRestorePoint", error);

	printDone();
}

DropBaseDiskResource::DropBaseDiskResource(){
	prefix = "drop";
}

void DropBaseDiskResource::run(const std::map<std::string, std::string>& params) const{
	ULONG error;
	if(!(DelBaseDisk(GetInt(bdid), &error)))
		return SDKError("DelBaseDisk", error);
	
	printDone();
}

MergeBaseDiskResource::MergeBaseDiskResource(){
	prefix = "drop";
}

void MergeBaseDiskResource::run(const std::map<std::string, std::string>& params) const{
	ULONG error;
	if(!(CommitToParentDisk(GetInt(bdid), &error)))
		return SDKError("CommitToParentDisk", error);
	
	printDone();
}

JSON::Value* DiskToJSON(const DISK_INFO_OBJ& info){
	JSON::Object* data = new JSON::Object();

	data->add(new JSON::String("Parent"), new JSON::Integer(info.nPID));
	data->add(new JSON::String("IOServer"), new JSON::Integer(info.nSrvID));
	data->add(new JSON::String("Pack"), new JSON::Integer(info.nPackID));
	
	data->add(new JSON::String("Type"), new JSON::String(DISK_TYPE_MAP.toString(info.nType)));

	data->add(new JSON::String("Size"), new JSON::Integer(info.nSizeMb));
	data->add(new JSON::String("Name"), new JSON::String(info.pchName));
	data->add(new JSON::String("ID"), new JSON::Integer(info.nID));
	
	data->add(new JSON::String("Format"), new JSON::Integer(info.nFmt));
	data->add(new JSON::String("Version"), new JSON::Integer(info.nVer));
	
	if(info.nType == DISK_TYPE_PROXY) {
		data->add(new JSON::String("Source"), new JSON::Integer(info.nXID));
		data->add(new JSON::String("SynchronizationSettings"), new JSON::Integer(info.nSyncSchd));
		
		DISK_SYNC sync;
		
		ULONG error;
		if(!(GetProxyDiskSync(info.nID, &sync, &error))) {
			SDKError("GetProxyDiskSync", error);
			delete data;
			return NULL;
		}
			
		data->add(new JSON::String("SyncType"), new JSON::Integer(sync.nSyncType));
		data->add(new JSON::String("SyncDay"), new JSON::Integer(sync.nCurSel));
		data->add(new JSON::String("SyncSpeed"), new JSON::Integer(sync.nSpeed));
		data->add(new JSON::String("SyncHour"), new JSON::Integer(sync.nClock));		
	}
	data->add(new JSON::String("Path"), new JSON::String(info.pchPath));

	JSON::Array* children = BaseDiskEnumToJSON(info.nSrvID, info.nID);
	if(children == NULL) {
		delete data;
		return NULL;
	}
	data->add(new JSON::String("Children"), children);
	
	return data;
}

JSON::Array* BaseDiskEnumToJSON(ULONG iid){
	ENUM_HANDLE EnumObj = GetFirstBaseDisk(iid, 0);
	
	return  enumToJSON<DISK_INFO_OBJ, DiskToJSON, GetNextBaseDisk>(EnumObj);
}

JSON::Array* BaseDiskEnumToJSON(ULONG iid, ULONG pid){
	ENUM_HANDLE EnumObj = GetFirstBaseDisk(iid, pid);
	
	return  enumToJSON<DISK_INFO_OBJ, DiskToJSON, GetNextBaseDisk>(EnumObj);
}


DiskRestore::DiskRestore(){
	prefix = "restore";
	children.push_back(new DiskRollBack());

}

void DiskRestore::run(const std::map<std::string, std::string>& params) const{
	JSON::Value* data = BaseDiskRestoreToJSON(GetInt(bdid));

	if(data == NULL) return;
	
	printHeaders();
	data->render();
	//printDone();
}

DiskRollBack::DiskRollBack(){
	prefix = "rollback";

}

void DiskRollBack::run(const std::map<std::string, std::string>& params) const{
	ULONG ID = GetInt(bdid);
	ULONG Ver, IOS, size;
	const char* name = (params.find("Name")->second).c_str();
	const char* path = (params.find("Path")->second).c_str();
	std::istringstream(params.find("Version")->second) >> Ver;
	std::istringstream(params.find("IOServer")->second) >> IOS;
	std::istringstream(params.find("Size")->second) >> size;
	ULONG isRestore = IsAllowedRestor(ID);
	if(isRestore == EBLIB_OK){
		if(AliveRestore(ID,Ver,IOS,size, name, path) == EBLIB_OK){
			printDone();
		}else{
			return SDKError("AliveRestore", EBLIB_UNKNOWN);
		}
	}else{
		return SDKError("isRestore", EBLIB_UNKNOWN);
	}

}


//wangxin add start 20160405
DiskMerge::DiskMerge(){
	prefix = "merge";

}


void DiskMerge::run(const std::map<std::string, std::string>& params) const{

	ULONG error;
	if(!CommitToParentDisk(GetInt(bdid)))
		return SDKError("CommitToParentDisk", error);

	printDone();

}
//wangxin add end 20160405



//wangxin add start 20160406
ProxyToBaseDisk::ProxyToBaseDisk(){
	prefix = "proxy";

}


void ProxyToBaseDisk::run(const std::map<std::string, std::string>& params) const{

	ULONG error;
	if(!ProxyDiskToBaseDisk(GetInt(bdid)))
		return SDKError("ProxyToBaseDisk", error);

	printDone();

}
//wangxin add end 20160406


JSON::Value* RestorePointToJSON(const SHOW_REST_POINT& info){
	JSON::Object* data = new JSON::Object();

	data->add(new JSON::String("Version"), new JSON::Integer(info.nVer));
	data->add(new JSON::String("Desc"), new JSON::String(info.pchDesc));
	data->add(new JSON::String("Time"), new JSON::String(info.pchTime));

	return data;
}

JSON::Array* BaseDiskRestoreToJSON(ULONG iid){
	 ENUM_HANDLE eHandle = GetFirstRestorePoint(iid);
	
	return  enumToJSON<SHOW_REST_POINT, RestorePointToJSON, GetNextRestorePoint>(eHandle);
}


//wangxin add start 20160411

BaseDiskList::BaseDiskList(){
	prefix = "computers";
}

void BaseDiskList::run(const std::map<std::string, std::string>& params) const{
	JSON::Value* data = BaseDiskComputerList(GetInt(bdid));
	if(data == NULL) return;
	printHeaders();
	data->render();
}

JSON::Value* BaseDiskComputerToJSON(const COMP_USAGE_LIST& info){
	JSON::Object* data = new JSON::Object();

	data->add(new JSON::String("Account"), new JSON::Integer(info.nCountComputer));
	data->add(new JSON::String("Name"), new JSON::String(info.compUsage[0].szCompName));
	data->add(new JSON::String("IPAddress"), new JSON::String(info.compUsage[0].szIP4));
	data->add(new JSON::String("MacAddress"), new JSON::String(info.compUsage[0].szMAC));

	return data;
}


JSON::Array* BaseDiskComputerList(ULONG iid){
	 ENUM_HANDLE eHandle = GetFirstUsageBaseDiskComputerList(iid);
	
	return  enumToJSON<COMP_USAGE_LIST, BaseDiskComputerToJSON, GetNextUsageBaseDiskComputerList>(eHandle);
}

//wangxin add end 20160411


//wangxin add start 20160412

ProxyDiskSync::ProxyDiskSync(){
	prefix = "disksync";
	children.push_back(new DiskSyncCreate());

}


void ProxyDiskSync::run(const std::map<std::string, std::string>& params) const{
	JSON::Value* data = DiskSyncToJSON(GetInt(bdid));
	if(data == NULL) return;
	printHeaders();
	data->render();
}

JSON::Object* DiskSyncToJSON(ULONG iid){
	JSON::Object* data = new JSON::Object();
	DISK_SYNC info;
	if (GetProxyDiskSync(iid, &info)){
        data->add(new JSON::String("SyncType"), new JSON::Integer(info.nSyncType));
        data->add(new JSON::String("Week"), new JSON::Integer(info.nCurSel));
        data->add(new JSON::String("Clock"), new JSON::Integer(info.nClock));
        data->add(new JSON::String("Speed"), new JSON::Integer(info.nSpeed));
     }
	return data;
}

//wangxin add end 20160412

//wangxin add start 20160414

DiskSyncCreate::DiskSyncCreate(){
	prefix = "create";

}

void DiskSyncCreate::run(const std::map<std::string, std::string>& params) const{
	ULONG id = GetInt(bdid);
	DISK_SYNC info;
	/*info.nSyncType = (int)(params.find("SyncType")->second.c_str());
	info.nCurSel = 	(int)(params.find("Week")->second.c_str());
	info.nClock = 	(int)(params.find("Clock")->second.c_str());
	info.nSpeed = 	(int)(params.find("Speed")->second.c_str());*/

	/*info.nSyncType = 1;
	info.nCurSel = 5;
	info.nClock = 10;
	info.nSpeed = 99;*/

	/*std::istringstream(params.find("SyncType")->second) >> info.nSyncType;
	std::istringstream(params.find("Week")->second) >> info.nCurSel;
	std::istringstream(params.find("Clock")->second) >> info.nClock;
	std::istringstream(params.find("Speed")->second) >> info.nSpeed;*/

	CopyInteger(nSyncType, "SyncType");
	CopyInteger(nCurSel, "Week");
	CopyInteger(nClock, "Clock");
	CopyInteger(nSpeed, "Speed");
	

	
	ULONG error;
	if(!SetProxyDiskSync(id,&info,&error))
		return SDKError("DiskSyncCreate", error);

	printDone();
	
}

//wangxin add end 20160414

//wangxin add start 20160419

DiskReSync::DiskReSync(){
	prefix = "resync";
}

void DiskReSync::run(const std::map<std::string, std::string>& params) const{

	ULONG errorno = ReSyncDisk(GetInt(bdid));
	if(errorno != EBLIB_SUCCESS) {
		char error[1000];
		
		sprintf(error, "ReSyncDisk");
		return SDKError(error, errorno);
	}

	printDone();
}

DiskReCheck::DiskReCheck(){
	prefix = "recheck";
}

void DiskReCheck::run(const std::map<std::string, std::string>& params) const{

	ULONG errorno = RecheckDisk(GetInt(bdid));
	if(errorno != EBLIB_SUCCESS) {
		char error[1000];
		
		sprintf(error, "RecheckDisk");
		return SDKError(error, errorno);
	}

	printDone();
}

//wangxin add end 20160419