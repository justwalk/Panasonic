define([
  'jquery',
  'underscore',
  'backbone',
  'views/servers/server',
  'text!templates/servers/grid_view.html',
  'text!templates/servers/list_view.html',
  'views/servers/add_server',
  'views/servers/creates_server',
  'views/servers/edit_server',
  'views/servers/options_server',
  'views/servers/settings',
  'bootstrapDatatables'
], function($, _, Backbone, ServerView, serversGrid, serversList, AddServerView, CreatesServerView, EditServerView, OptionsServerView, ServerSettingsView){
    var ServersView = Backbone.View.extend({
      template: _.template(underi18n.template(serversGrid, msgFactory)),
      events: {
        'click .servers-actions .add-server': 'addServer',
        'click .servers-actions .remove-server': 'removeServer',
        'click .switch-view': 'switchView',
        'click .select-all': 'selectAll',
        'click .select-none': 'selectNone',
        'click .select-invert': 'selectInvert',
        'click .add-server': 'addServer',
        'click .creates-server': 'createsServer',
		'click .edit-server': 'editServer',
        'click .remove-server': 'removeServer',
        'click .server-options': 'optionsServer',
        'click .backupLink': 'backupLink',
        'click .settings':   'openSettings',
        'click .restart-servers': 'restartServers',
        'click :not(.servers-actions .add-server .remove-server .switch-view .select-all .select-none .select-invert .server-options .backupLink .settings .restart-servers)': 'clickClose'
      },
      initialize: function(options) {
        var self = this;
        _.bindAll(this);
        self.router = self.options.router;
        self.list = false;
        self.template = self.list ? _.template(underi18n.template(serversList, App.msgFactory)) : _.template(underi18n.template(serversGrid, App.msgFactory));
        self.collection.bind('add reset', function(servers){
          self.render();
        });
        this.serverViews = [];
      },
	  
	  backupLink: function(){
		window.socket.emit('message:backup', {}, function(err, data) {
      if(err)
				return;
			
			window.location = '/backup.zip';
		});
	  },
     clickClose: function(){
              if($('.server-logo').attr('no-hide') == 'true' ){ 
                return;
              }
              else{
                $('.server-logo', this.model).removeClass('detailed');
              }
    },

      resetClickedServer: function(server) {
        if (this.clickedServer.get(server.id)) {
          this.clickedServer.reset([]);
        }else {
          this.clickedServer.reset([server]);
        }
      },
      
      getSelectedViews: function() {
        return _.filter(this.serverViews, function(serverView) { return serverView.isSelected; });
      },
      
      removeServer: function() {
        var ja = underi18n.MessageFactory(locale);
        if (this.getSelectedViews().length > 0) {
          var r = confirm(ja('Are you sure you want to delete it?'));
          if (r === true) {
                _(this.getSelectedViews()).forEach(function(serverView) {
                  serverView.model.destroy({
                    wait:true,
                    error: function(obj, resp) {
                    alert(resp.error+' id: '+obj.id);
                  }
                });
              });
          }
        }
        else{
          alert(ja('Please select one server at least to delete.'));
        }
      },
      
      switchView: function(e) {
        this.list = !this.list;
        if ($('#switch-list').hasClass("show_item")) {
          // list mode
          $('#switch-grid').removeClass('hide_item').addClass('show_item');
          $('#switch-list').removeClass('show_item').addClass('hide_item');
        } else {
          // grid mode
          $('#switch-grid').removeClass('show_item').addClass('hide_item');
          $('#switch-list').removeClass('hide_item').addClass('show_item');
        }
        this.render();
      },

      selectAll: function() {
        App.vent.trigger('servers:change:selection:all');
      },

      selectNone: function() {
        App.vent.trigger('servers:change:selection:none');
      },

      selectInvert: function() {
        App.vent.trigger('servers:change:selection:invert');
      },

      addServer: function(e) {
        var addServerView = new AddServerView({parentView:this});
        addServerView.render().$el.appendTo($('#modal-container')).modal();
        $('input:visible:first', addServerView.el).focus();
      },
      createsServer: function(e) {
        var createsServerView = new CreatesServerView({parentView:this});
        createsServerView.render().$el.appendTo($('#modal-container')).modal();
        $('input:visible:first', createsServerView.el).focus();
      },
	  
	  editServer: function() {
          var ja = underi18n.MessageFactory(locale);
          if (this.getSelectedViews().length > 0) {
        	var editServerView = new EditServerView({model:this.getSelectedViews()[0].model});
            editServerView.render().$el.appendTo($('#modal-container')).modal();
            $('input:visible:first', editServerView.el).focus();
          }else{
            alert(ja('Please select a disk to edit.'));
          }
        },
      
      optionsServer: function(e) {
        var optionsServer = new OptionsServerView({parentView:this});
        optionsServer.render().$el.appendTo($('#modal-container')).modal();
        $('input:visible:first', optionServer.el).focus();
      },
             
      render: function() {
        var self = this;
        self.template = self.list ? _.template(underi18n.template(serversList, App.msgFactory)) : _.template(underi18n.template(serversGrid, msgFactory));
        self.$el.html(self.template());
        this.serverViews = [];
        this.collection.each(function(server) {
          var serverView = new ServerView({
            model: server,
            list: self.list,
            tagName: self.list ? 'tr' : 'div',
            className: self.list ? '' : 'server-logo pull-left'
          });
          this.$('#servers-container').append(serverView.render().el);
          self.serverViews.push(serverView);
        });

        if (self.list) {
          $('#table-view', self.el).dataTable({
            'sDom': 'R<\'row-fluid table-data-search\'<\'datatable-part pull-left\'l><\'datatable-part pull-right\'f>r> t <\'row-fluid\'<\'datatable-part-medium pull-left\'i><\'datatable-part-medium padding-remove-a pull-right\'p>>',
            'sPaginationType': 'bootstrap',
            'oLanguage': {
              'sUrl': '/dt.' + App.locale + '.js'
            },
            'bDestroy': true
          });
        }
        
        return self;
      },

      openSettings: function() {
        
        socket.emit('settings', [''], function() {
        });

        var settingsView = new ServerSettingsView();

        $("#modal-container").html(settingsView.render().$el.modal());
      },

      restartServers: function() {
        var selectedViews = this.getSelectedViews();
        if (selectedViews.length) {
          var servers = _.pluck(selectedViews, 'model');
          servers = servers.filter(function(e) {return e.get('online');});
          _.each(servers, function(server) {
            socket.emit('server:restart', server.toJSON());
          });
        }
      }
    });
    return ServersView;
});
