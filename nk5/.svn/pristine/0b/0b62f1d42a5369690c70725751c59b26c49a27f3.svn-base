define([
  'jquery',
  'underscore',
  'backbone',
  'text!templates/schedules/task.html',
  'text!templates/schedules/copy_modal.html',
  'views/servers/server',
  'views/storages/storages',
  'views/groups/groups',
  'collection/servers',
  'collection/base_disks',  
  'collection/groups',
  'modelBinder'
], function($, _, Backbone, tableItem,copyModal, ServersView,StoragesView,GroupsView,ServersCollection,StoragesCollection,GroupsCollection,ModelBinder){
    TaskView = Backbone.View.extend({
      tagName: 'tr',
      _modelBinder: undefined,
	  
	   events: {
            'click .removeTask': 'removeTask',
            'click .logTask':'logTask',
            'click .enable' :'updateEnable',
            'click .copy': 'copyTask',
            'click .edit': 'editTask',
            'click .copy_save':'copySave',
        },
		
		template: _.template(underi18n.template(tableItem, msgFactory)),


      initialize: function() {
        this.task = this.options.task;
        if(this.task.get('enable')==null){
          this.task.set({'enable':true});
        }
        this._modelBinder = new ModelBinder();
        _.bindAll(this, 'render');
      },
	  
	  removeTask: function() {
		  this.task.serverDelete();
		  this.task.destroy();
	  },
    ShowServersView:function(){
      var servers = new ServersCollection(); 
      var self=this;
      servers.fetch({success:function(erorr,date){
          self.serverViews=[];
          self.$el.find("#servers-container").html('');
          servers.each(function(server) {
          var serverView = new ServerView({
                model: server,
                list: false,
                tagName:  'div',
                className: 'server-logo pull-left'});
                 self.$el.find("#servers-container").append(serverView.render().el);
                  self.serverViews.push(serverView);
                  if(self.task.get('name')==server.get('IP')){
                    serverView.toggleSelectDisk(true);
                  }
               });
               } 
          });
    },
    ShowBasedisksView:function(server_id){
      var base_disks = new StoragesCollection();
       var storagesView = new StoragesView({collection: base_disks,selected_id:this.task.get('computer_uuid')});
       storagesView.setSelectedId(server_id);
        storagesView.collection.fetch();
        this.$el.find('#storages-container').html(storagesView.el);
    },
    ShowClientsView:function(){
       var groups = new GroupsCollection();
       var selected_ids=this.task.get('computer_uuid').split('|');
       console.log(selected_ids);
       var groupsView = new GroupsView({collection: groups,selected:selected_ids});
       groupsView.collection.fetch();
       groupsView.setGroupid();
       this.$el.find('#clients-container').html(groupsView.el);

       groupsView.delegateEvents();
       window.setTimeout(function(){
        $('.close').removeAttr("disabled");
        $('.btn').removeAttr("disabled");
       },2000)
       
    },
    getSelectedViews: function() {
        return _.filter(this.serverViews, function(serverView) { 
          return serverView.isSelected; });
    },
    copyTask:function(){
          this.$el.find(".copy_modal").modal();
          var action=this.task.get('action');
          alert(action);
          if(action=='script_exe'||action=='ioserver_restart'){
             this.ShowServersView();
          }else if(action=='start_update'||action=='end_update'||action=='action_exam'||action=='poweron'||action=='group_poweron'||action=='poweroff'||action=='group_poweroff'||action=='restart'||action=='group_restart'||action=='menu_switch'||action=='group_menu_switch'||action=='start_device'||action=='group_start_device'||action=='auto_update'||action=='start'||action=='group_start'||action=='send_message'||action=='group_send_message'||action=='send_command'||action=='group_send_command'||action=='logout'||action=='group_logout'){
            this.ShowClientsView();
          }else if (action=='disk_copy'||action=='disk_backup'||action=='disk_resynchronize'||action=='disk_recheck') {
            this.ShowBasedisksView();
          }
     },     
    copySave:function(){
      this.$el.find(".copy_modal").modal('hide');
    },
    editTask:function(){

    },
    updateEnable:function(){
      this.task.set({enable:!this.task.get('enable')});
      this.task.save();
      this.render();
    },
    logTask:function(){
      $('#tasklog').modal();
      socket.emit('task:log',{task:this.task}, function(err, log) {
        if(log){
          $('#contentft').width(3100);
          $('#logcontent').html(log);
        }else{
          $('#contentft').width(500);
          $('#logcontent').html(App.msgFactory('no log'));
        }
      })
    },
    getSelectedViews: function() {
       
        return _.filter(this.serverViews, function(serverView) { 
          return serverView.isSelected; });
      },
    render: function() {
		var html = this.template({
			task: this.task,
       memo:this.task.get('memo')===null?'':this.task.get('memo'),
			action: App.msgFactory(this.task.get('action')),
			cycle: App.msgFactory(this.task.get('cycle')),
			last_run_status: App.msgFactory(this.task.get('last_run_status')),
      date:this.dataToLong(this.task.get('date'))
		  });

        $(this.el).html(html);
        this._modelBinder.bind(this.task, this.el);
        return this;
      },
      dataToLong:function(dateStr){
        var arrayDate=dateStr.split('/');
       var dateformat=arrayDate[2]+'-'+arrayDate[1]+'-'+arrayDate[0];
       return dateformat;
      }
    });
    return TaskView;
});